/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;

import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Fleet;
import model.FleetDirectory;

/**
 *
 * @author anvithalakshmisha
 */
public class ViewJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewJPanel
     */
    FleetDirectory fleetDirec;

    public ViewJPanel(FleetDirectory fleetDirec) {
        initComponents();
        this.fleetDirec = fleetDirec;

        populateTable();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblRecords = new javax.swing.JTable();
        btnDelete = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblResults = new javax.swing.JTable();
        lblAllRecord = new javax.swing.JLabel();
        btnFindFirstAvailCar = new javax.swing.JButton();
        btnFindAllCar = new javax.swing.JButton();
        lblSearchCarByManufacturer = new javax.swing.JLabel();
        txtFindManufacturer = new javax.swing.JTextField();
        btnSearchManufacturer = new javax.swing.JButton();
        lblFindCarByManYear = new javax.swing.JLabel();
        txtFindManYear = new javax.swing.JTextField();
        btnSearchManYear = new javax.swing.JButton();
        lblSearchBySerialNumber = new javax.swing.JLabel();
        txtSearchBySerialNumber = new javax.swing.JTextField();
        btnSearchBySerialNumber = new javax.swing.JButton();
        lblFindCarByModelNumber = new javax.swing.JLabel();
        txtFindByModelNumber = new javax.swing.JTextField();
        btnFindByModelNumber = new javax.swing.JButton();
        btnSearchAllManufacturers = new javax.swing.JButton();
        btnFindLastUpdatedTime = new javax.swing.JButton();
        lblGetListOfCarByCity = new javax.swing.JLabel();
        txtGetListOfCarByCity = new javax.swing.JTextField();
        btnGetListOfAvailCarByCity = new javax.swing.JButton();
        btnGetAllCarWithExpiredManufactureCert = new javax.swing.JButton();
        lblSearchResult = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        btnChangeExpiredState = new javax.swing.JButton();
        btnChangeAvailState = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        lblFindCarWithSeatCount = new javax.swing.JLabel();
        txtMinSeatCount = new javax.swing.JTextField();
        txtMaxSeatCount = new javax.swing.JTextField();
        btnSearchSeat = new javax.swing.JButton();

        tblRecords.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Model", "Manufacturer", "Manufacture Year", "Serial number", "Number of seats", "Model number", "Availability", "Maintenance expired", "City"
            }
        ));
        jScrollPane1.setViewportView(tblRecords);

        btnDelete.setText("Delete the selected row car record");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        tblResults.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Model", "Manufacturer", "Manufacture Year", "Serial number", "Number of seats", "Model number", "Availability", "Maintenance expired", "City"
            }
        ));
        jScrollPane2.setViewportView(tblResults);

        lblAllRecord.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lblAllRecord.setText("All fleet records");

        btnFindFirstAvailCar.setText("Get the first available car");
        btnFindFirstAvailCar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindFirstAvailCarActionPerformed(evt);
            }
        });

        btnFindAllCar.setText("Get the count of all available car");
        btnFindAllCar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindAllCarActionPerformed(evt);
            }
        });

        lblSearchCarByManufacturer.setText("Enter the manufacturer(s) name seperated by space to get a list ");

        txtFindManufacturer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFindManufacturerActionPerformed(evt);
            }
        });

        btnSearchManufacturer.setText("Search");
        btnSearchManufacturer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchManufacturerActionPerformed(evt);
            }
        });

        lblFindCarByManYear.setText("Enter the manufactured year to find all the cars manufactured that year");

        txtFindManYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFindManYearActionPerformed(evt);
            }
        });

        btnSearchManYear.setText("Search");
        btnSearchManYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchManYearActionPerformed(evt);
            }
        });

        lblSearchBySerialNumber.setText("Enter a serial number to to get a list of that cars attributes");

        btnSearchBySerialNumber.setText("Search");
        btnSearchBySerialNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchBySerialNumberActionPerformed(evt);
            }
        });

        lblFindCarByModelNumber.setText("Enter a model number to find all the cars sharing it");

        btnFindByModelNumber.setText("Search");
        btnFindByModelNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindByModelNumberActionPerformed(evt);
            }
        });

        btnSearchAllManufacturers.setText("Get all manufactures");
        btnSearchAllManufacturers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchAllManufacturersActionPerformed(evt);
            }
        });

        btnFindLastUpdatedTime.setText("Get the last date the fleet cataog was updated");
        btnFindLastUpdatedTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindLastUpdatedTimeActionPerformed(evt);
            }
        });

        lblGetListOfCarByCity.setText("Enter the city name to get a list of all available car");

        btnGetListOfAvailCarByCity.setText("Search");
        btnGetListOfAvailCarByCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetListOfAvailCarByCityActionPerformed(evt);
            }
        });

        btnGetAllCarWithExpiredManufactureCert.setText("Get all car with expired manufacture certificate");
        btnGetAllCarWithExpiredManufactureCert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetAllCarWithExpiredManufactureCertActionPerformed(evt);
            }
        });

        lblSearchResult.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lblSearchResult.setText("Search results");

        btnChangeExpiredState.setText("Change the state of expired certificate of the selected fleet");
        btnChangeExpiredState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeExpiredStateActionPerformed(evt);
            }
        });

        btnChangeAvailState.setText("Change the state of availability of the selected fleet");
        btnChangeAvailState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeAvailStateActionPerformed(evt);
            }
        });

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        lblFindCarWithSeatCount.setText("Enter the min and max number of seats to search for a car :");

        txtMinSeatCount.setText("Min");

        txtMaxSeatCount.setText("Max");

        btnSearchSeat.setText("Search");
        btnSearchSeat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchSeatActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblAllRecord)
                            .addComponent(lblSearchCarByManufacturer)
                            .addComponent(lblSearchBySerialNumber))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtFindManYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnSearchManYear))
                                    .addComponent(lblFindCarByManYear)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtFindManufacturer, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnSearchManufacturer))
                                    .addComponent(lblFindCarByModelNumber)
                                    .addComponent(lblGetListOfCarByCity)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtGetListOfCarByCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnGetListOfAvailCarByCity))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtFindByModelNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnFindByModelNumber))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtSearchBySerialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnSearchBySerialNumber)))
                                .addGap(100, 100, 100)
                                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblSearchResult)
                                        .addGap(625, 625, 625))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 613, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnFindAllCar)
                                    .addComponent(btnFindFirstAvailCar)
                                    .addComponent(btnDelete)
                                    .addComponent(btnChangeExpiredState))
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnSearchAllManufacturers)
                                    .addComponent(btnChangeAvailState)
                                    .addComponent(btnFindLastUpdatedTime)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnGetAllCarWithExpiredManufactureCert)
                                        .addGap(72, 72, 72)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(6, 6, 6)
                                                .addComponent(txtMinSeatCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(txtMaxSeatCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(btnSearchSeat))
                                            .addComponent(lblFindCarWithSeatCount))))
                                .addGap(0, 233, Short.MAX_VALUE))
                            .addComponent(jSeparator1))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnChangeAvailState, btnChangeExpiredState, btnDelete, btnFindAllCar, btnFindFirstAvailCar, btnFindLastUpdatedTime, btnGetAllCarWithExpiredManufactureCert, btnSearchAllManufacturers});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblFindCarByManYear, lblFindCarByModelNumber, lblGetListOfCarByCity, lblSearchBySerialNumber, lblSearchCarByManufacturer});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnFindByModelNumber, btnGetListOfAvailCarByCity, btnSearchBySerialNumber, btnSearchManYear, btnSearchManufacturer});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtFindByModelNumber, txtFindManYear, txtFindManufacturer, txtGetListOfCarByCity, txtSearchBySerialNumber});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblAllRecord)
                .addGap(8, 8, 8)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDelete)
                    .addComponent(btnFindLastUpdatedTime))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnFindFirstAvailCar)
                            .addComponent(btnGetAllCarWithExpiredManufactureCert))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnFindAllCar)
                            .addComponent(btnSearchAllManufacturers))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnChangeExpiredState)
                            .addComponent(btnChangeAvailState)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(lblFindCarWithSeatCount)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMinSeatCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMaxSeatCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSearchSeat))))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblSearchCarByManufacturer)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtFindManufacturer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnSearchManufacturer))
                                .addGap(18, 18, 18)
                                .addComponent(lblFindCarByManYear)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtFindManYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnSearchManYear))
                                .addGap(18, 18, 18)
                                .addComponent(lblSearchBySerialNumber)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtSearchBySerialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnSearchBySerialNumber))
                                .addGap(18, 18, 18)
                                .addComponent(lblFindCarByModelNumber)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtFindByModelNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnFindByModelNumber))
                                .addGap(18, 18, 18)
                                .addComponent(lblGetListOfCarByCity)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtGetListOfCarByCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnGetListOfAvailCarByCity)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblSearchResult)
                                .addGap(26, 26, 26)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(123, Short.MAX_VALUE))
                    .addComponent(jSeparator2)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblRecords.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete");
            return;
        }

        DefaultTableModel model = (DefaultTableModel) tblRecords.getModel();
        Fleet selectedFleet = (Fleet) model.getValueAt(selectedRowIndex, 0);

        fleetDirec.removeFleet(selectedFleet);
        JOptionPane.showMessageDialog(this, "Record deleted");
        populateTable();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnFindAllCarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindAllCarActionPerformed
        // TODO add your handling code here:
        DefaultTableModel modelRes = (DefaultTableModel) tblResults.getModel();
        modelRes.setRowCount(0);
        int count = 0;
        for (Fleet f : fleetDirec.getFleet()) {
            if ("Yes".equals(f.getAvailable())) {
                count++;
                Object[] row = new Object[9];
                row[0] = f;
                row[1] = f.getCarManufacturer();
                row[2] = f.getCarManufactureYear();
                row[3] = f.getSerialNumber();
                row[4] = f.getSeatCount();
                row[5] = f.getModelNumber();
                row[6] = f.getAvailable();
                row[7] = f.isIsMaintenanceExpired();
                row[8] = f.getCity();

                modelRes.addRow(row);
            }
        }
        JOptionPane.showMessageDialog(this, "the total available car is " + count);
    }//GEN-LAST:event_btnFindAllCarActionPerformed

    private void btnFindFirstAvailCarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindFirstAvailCarActionPerformed
        // TODO add your handling code here:
        DefaultTableModel modelRes = (DefaultTableModel) tblResults.getModel();
        modelRes.setRowCount(0);
        for (Fleet f : fleetDirec.getFleet()) {
            if ("Yes".equals(f.getAvailable())) {
                Object[] row = new Object[9];
                row[0] = f;
                row[1] = f.getCarManufacturer();
                row[2] = f.getCarManufactureYear();
                row[3] = f.getSerialNumber();
                row[4] = f.getSeatCount();
                row[5] = f.getModelNumber();
                row[6] = f.getAvailable();
                row[7] = f.isIsMaintenanceExpired();
                row[8] = f.getCity();

                modelRes.addRow(row);
                break;
            }
        }
    }//GEN-LAST:event_btnFindFirstAvailCarActionPerformed

    private void txtFindManufacturerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFindManufacturerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFindManufacturerActionPerformed

    private void btnSearchManufacturerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchManufacturerActionPerformed
        // TODO add your handling code here:
        DefaultTableModel modelRes = (DefaultTableModel) tblResults.getModel();
        modelRes.setRowCount(0);
        if (!txtFindManufacturer.getText().isBlank()) {
            if (txtFindManufacturer.getText().contains(" ")) {
                String[] splited = txtFindManufacturer.getText().split("\\s+");
                for (Fleet f : fleetDirec.getFleet()) {
                    for (String s : splited) {
                        if ((s.toLowerCase()).equals(f.getCarManufacturer().toLowerCase())) {

                            Object[] row = new Object[9];
                            row[0] = f;
                            row[1] = f.getCarManufacturer();
                            row[2] = f.getCarManufactureYear();
                            row[3] = f.getSerialNumber();
                            row[4] = f.getSeatCount();
                            row[5] = f.getModelNumber();
                            row[6] = f.getAvailable();
                            row[7] = f.isIsMaintenanceExpired();
                            row[8] = f.getCity();

                            modelRes.addRow(row);
                        }
                    }
                }

            } else {

                for (Fleet f : fleetDirec.getFleet()) {
                    if ((txtFindManufacturer.getText().toLowerCase()).equals(f.getCarManufacturer().toLowerCase())) {

                        Object[] row = new Object[9];
                        row[0] = f;
                        row[1] = f.getCarManufacturer();
                        row[2] = f.getCarManufactureYear();
                        row[3] = f.getSerialNumber();
                        row[4] = f.getSeatCount();
                        row[5] = f.getModelNumber();
                        row[6] = f.getAvailable();
                        row[7] = f.isIsMaintenanceExpired();
                        row[8] = f.getCity();

                        modelRes.addRow(row);
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Enter atleast one manufacturer name");
        }
    }//GEN-LAST:event_btnSearchManufacturerActionPerformed

    private void txtFindManYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFindManYearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFindManYearActionPerformed

//    add a check to make sure its number
    private void btnSearchManYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchManYearActionPerformed
        // TODO add your handling code here:
        DefaultTableModel modelRes = (DefaultTableModel) tblResults.getModel();
        modelRes.setRowCount(0);
        if (!txtFindManYear.getText().isBlank()) {
            boolean isChar = false;
            String key = txtFindManYear.getText();
            for (int i = 0; i < key.length(); i++) {
                if (!(key.charAt(i) >= '0'
                        && key.charAt(i) <= '9')) {
                    isChar = true;
                }
            }
            if (isChar) {
                JOptionPane.showMessageDialog(this, "enter only number");
            } else {
                for (Fleet f : fleetDirec.getFleet()) {
                    if (Integer.parseInt(txtFindManYear.getText()) == f.getCarManufactureYear()) {

                        Object[] row = new Object[9];
                        row[0] = f;
                        row[1] = f.getCarManufacturer();
                        row[2] = f.getCarManufactureYear();
                        row[3] = f.getSerialNumber();
                        row[4] = f.getSeatCount();
                        row[5] = f.getModelNumber();
                        row[6] = f.getAvailable();
                        row[7] = f.isIsMaintenanceExpired();
                        row[8] = f.getCity();

                        modelRes.addRow(row);
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Enter the year to search");
        }
    }//GEN-LAST:event_btnSearchManYearActionPerformed

    private void btnSearchBySerialNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchBySerialNumberActionPerformed
        // TODO add your handling code here:
        DefaultTableModel modelRes = (DefaultTableModel) tblResults.getModel();
        modelRes.setRowCount(0);
        if (!txtSearchBySerialNumber.getText().isBlank()) {
            for (Fleet f : fleetDirec.getFleet()) {
                if (txtSearchBySerialNumber.getText() == null ? f.getSerialNumber() == null : txtSearchBySerialNumber.getText().toLowerCase().equals(f.getSerialNumber())) {

                    Object[] row = new Object[9];
                    row[0] = f;
                    row[1] = f.getCarManufacturer();
                    row[2] = f.getCarManufactureYear();
                    row[3] = f.getSerialNumber();
                    row[4] = f.getSeatCount();
                    row[5] = f.getModelNumber();
                    row[6] = f.getAvailable();
                    row[7] = f.isIsMaintenanceExpired();
                    row[8] = f.getCity();

                    modelRes.addRow(row);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Enter the serial number to search");
        }
    }//GEN-LAST:event_btnSearchBySerialNumberActionPerformed

    private void btnFindByModelNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindByModelNumberActionPerformed
        // TODO add your handling code here:
        DefaultTableModel modelRes = (DefaultTableModel) tblResults.getModel();
        modelRes.setRowCount(0);
        if (!txtFindByModelNumber.getText().isBlank()) {
            for (Fleet f : fleetDirec.getFleet()) {
                if (txtFindByModelNumber.getText() == null ? f.getModelNumber() == null : txtFindByModelNumber.getText().toLowerCase().equals(f.getModelNumber())) {

                    Object[] row = new Object[9];
                    row[0] = f;
                    row[1] = f.getCarManufacturer();
                    row[2] = f.getCarManufactureYear();
                    row[3] = f.getSerialNumber();
                    row[4] = f.getSeatCount();
                    row[5] = f.getModelNumber();
                    row[6] = f.getAvailable();
                    row[7] = f.isIsMaintenanceExpired();
                    row[8] = f.getCity();

                    modelRes.addRow(row);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Enter the model number to search");
        }
    }//GEN-LAST:event_btnFindByModelNumberActionPerformed

    private void btnSearchAllManufacturersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchAllManufacturersActionPerformed
        // TODO add your handling code here:
        Set<String> set = new HashSet<String>();

        // Using add() method to add elements into the Set
        for (Fleet f : fleetDirec.getFleet()) {
            set.add(f.getCarManufacturer().toLowerCase());
        }
        JOptionPane.showMessageDialog(this, "the list of car manufacturers are " + set);
    }//GEN-LAST:event_btnSearchAllManufacturersActionPerformed

    private void btnFindLastUpdatedTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindLastUpdatedTimeActionPerformed
        // TODO add your handling code here:
        Set<Date> set = new HashSet<Date>();
        for (Fleet f : fleetDirec.getFleet()) {
            set.add(f.getLastUpdatedFleetCatalog());

        }
        JOptionPane.showMessageDialog(this, "the last updated time of the fleet catalog was " + Collections.max(set));
    }//GEN-LAST:event_btnFindLastUpdatedTimeActionPerformed

    private void btnGetListOfAvailCarByCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetListOfAvailCarByCityActionPerformed
        // TODO add your handling code here:
        DefaultTableModel modelRes = (DefaultTableModel) tblResults.getModel();
        modelRes.setRowCount(0);
        if (!txtGetListOfCarByCity.getText().isBlank()) {
            for (Fleet f : fleetDirec.getFleet()) {
                if (txtGetListOfCarByCity.getText() == null ? f.getCity() == null : (txtGetListOfCarByCity.getText().toLowerCase()).equals(f.getCity().toLowerCase())) {
                    if ("Yes".equals(f.getAvailable())) {

                        Object[] row = new Object[9];
                        row[0] = f;
                        row[1] = f.getCarManufacturer();
                        row[2] = f.getCarManufactureYear();
                        row[3] = f.getSerialNumber();
                        row[4] = f.getSeatCount();
                        row[5] = f.getModelNumber();
                        row[6] = f.getAvailable();
                        row[7] = f.isIsMaintenanceExpired();
                        row[8] = f.getCity();

                        modelRes.addRow(row);
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Enter the city name to search");
        }
    }//GEN-LAST:event_btnGetListOfAvailCarByCityActionPerformed

    private void btnGetAllCarWithExpiredManufactureCertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetAllCarWithExpiredManufactureCertActionPerformed
        // TODO add your handling code here:
        DefaultTableModel modelRes = (DefaultTableModel) tblResults.getModel();
        modelRes.setRowCount(0);
        for (Fleet f : fleetDirec.getFleet()) {
            if ("Yes".equals(f.isIsMaintenanceExpired())) {
                Object[] row = new Object[9];
                row[0] = f;
                row[1] = f.getCarManufacturer();
                row[2] = f.getCarManufactureYear();
                row[3] = f.getSerialNumber();
                row[4] = f.getSeatCount();
                row[5] = f.getModelNumber();
                row[6] = f.getAvailable();
                row[7] = f.isIsMaintenanceExpired();
                row[8] = f.getCity();

                modelRes.addRow(row);
            }
        }
    }//GEN-LAST:event_btnGetAllCarWithExpiredManufactureCertActionPerformed

    private void btnSearchSeatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchSeatActionPerformed
        // TODO add your handling code here:
        DefaultTableModel modelRes = (DefaultTableModel) tblResults.getModel();
        modelRes.setRowCount(0);
        for (Fleet f : fleetDirec.getFleet()) {
            if (!txtMinSeatCount.getText().isEmpty() && !txtMaxSeatCount.getText().isEmpty()) {
                boolean isChar = false;
                String key = txtMinSeatCount.getText();
                for (int i = 0; i < key.length(); i++) {
                    if (!(key.charAt(i) >= '0'
                            && key.charAt(i) <= '9')) {
                        isChar = true;
                    }
                }
                String key1 = txtMaxSeatCount.getText();
                for (int i = 0; i < key1.length(); i++) {
                    if (!(key1.charAt(i) >= '0'
                            && key1.charAt(i) <= '9')) {
                        isChar = true;
                    }
                }
                if (isChar) {
                    JOptionPane.showMessageDialog(this, "enter only number");
                } else {
                    if (f.getSeatCount() >= Integer.parseInt(txtMinSeatCount.getText()) && f.getSeatCount() < Integer.parseInt(txtMaxSeatCount.getText())) {
                        Object[] row = new Object[9];
                        row[0] = f;
                        row[1] = f.getCarManufacturer();
                        row[2] = f.getCarManufactureYear();
                        row[3] = f.getSerialNumber();
                        row[4] = f.getSeatCount();
                        row[5] = f.getModelNumber();
                        row[6] = f.getAvailable();
                        row[7] = f.isIsMaintenanceExpired();
                        row[8] = f.getCity();

                        modelRes.addRow(row);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Enter both min and max value");
            }
        }
    }//GEN-LAST:event_btnSearchSeatActionPerformed

    private void btnChangeAvailStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeAvailStateActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblRecords.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to change the state");
            return;
        }

        DefaultTableModel model = (DefaultTableModel) tblRecords.getModel();
        Fleet selectedFleet = (Fleet) model.getValueAt(selectedRowIndex, 0);

        if ("Yes".equals(selectedFleet.getAvailable())) {
            selectedFleet.setAvailable("No");
        } else {
            selectedFleet.setAvailable("Yes");
        }
        populateTable();
        selectedFleet.setLastUpdatedFleetCatalog();
    }//GEN-LAST:event_btnChangeAvailStateActionPerformed

    private void btnChangeExpiredStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeExpiredStateActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblRecords.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to change the state");
            return;
        }

        DefaultTableModel model = (DefaultTableModel) tblRecords.getModel();
        Fleet selectedFleet = (Fleet) model.getValueAt(selectedRowIndex, 0);

        if ("Yes".equals(selectedFleet.isIsMaintenanceExpired())) {
            selectedFleet.setIsMaintenanceExpired("No");
        } else {
            selectedFleet.setIsMaintenanceExpired("Yes");
        }
        populateTable();
        selectedFleet.setLastUpdatedFleetCatalog();
    }//GEN-LAST:event_btnChangeExpiredStateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChangeAvailState;
    private javax.swing.JButton btnChangeExpiredState;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnFindAllCar;
    private javax.swing.JButton btnFindByModelNumber;
    private javax.swing.JButton btnFindFirstAvailCar;
    private javax.swing.JButton btnFindLastUpdatedTime;
    private javax.swing.JButton btnGetAllCarWithExpiredManufactureCert;
    private javax.swing.JButton btnGetListOfAvailCarByCity;
    private javax.swing.JButton btnSearchAllManufacturers;
    private javax.swing.JButton btnSearchBySerialNumber;
    private javax.swing.JButton btnSearchManYear;
    private javax.swing.JButton btnSearchManufacturer;
    private javax.swing.JButton btnSearchSeat;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lblAllRecord;
    private javax.swing.JLabel lblFindCarByManYear;
    private javax.swing.JLabel lblFindCarByModelNumber;
    private javax.swing.JLabel lblFindCarWithSeatCount;
    private javax.swing.JLabel lblGetListOfCarByCity;
    private javax.swing.JLabel lblSearchBySerialNumber;
    private javax.swing.JLabel lblSearchCarByManufacturer;
    private javax.swing.JLabel lblSearchResult;
    private javax.swing.JTable tblRecords;
    private javax.swing.JTable tblResults;
    private javax.swing.JTextField txtFindByModelNumber;
    private javax.swing.JTextField txtFindManYear;
    private javax.swing.JTextField txtFindManufacturer;
    private javax.swing.JTextField txtGetListOfCarByCity;
    private javax.swing.JTextField txtMaxSeatCount;
    private javax.swing.JTextField txtMinSeatCount;
    private javax.swing.JTextField txtSearchBySerialNumber;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tblRecords.getModel();
        model.setRowCount(0);

        for (Fleet f : fleetDirec.getFleet()) {

            Object[] row = new Object[9];
            row[0] = f;
            row[1] = f.getCarManufacturer();
            row[2] = f.getCarManufactureYear();
            row[3] = f.getSerialNumber();
            row[4] = f.getSeatCount();
            row[5] = f.getModelNumber();
            row[6] = f.getAvailable();
            row[7] = f.isIsMaintenanceExpired();
            row[8] = f.getCity();

            model.addRow(row);

        }
    }
}
