/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;

import Model.AbnormalClass;
import Model.City;
import Model.Encounter;
import Model.EncounterHistory;
import Model.Patient;
import Model.PatientDirectory;
import Model.Person;
import Model.PersonDirectory;
import Model.VitalSigns;
import java.awt.Component;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author anvithalakshmisha
 */
public class OverviewJPanel extends javax.swing.JPanel {

    /**
     * Creates new form OverviewJPanel
     */
    PersonDirectory personDirec;
    int ID;
    Boolean update = false;
    VitalSigns vital;
    Encounter encounter;
    EncounterHistory vitalhist;
    Patient patient;
    PatientDirectory patientDir;
    City city;
    List<String> communitylist = new ArrayList<>();

    public OverviewJPanel(PersonDirectory personDirec, Patient patient, VitalSigns vital, Encounter encounter, EncounterHistory encounterHist, PatientDirectory patientDir, City city) {
        initComponents();
        this.personDirec = personDirec;
        this.encounter = encounter;
        this.vitalhist = encounterHist;
        this.vital = vital;
        this.patient = patient;
        this.patientDir = patientDir;
        this.city = city;
        panelForDisplay(jPanel1);
        populatePersonTable();
        populateAbnormalitiesTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane2 = new javax.swing.JLayeredPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblAllPersonDetails = new javax.swing.JTable();
        btnAddVitals = new javax.swing.JButton();
        btnUpdateDetails = new javax.swing.JButton();
        btnDeleteDetails = new javax.swing.JButton();
        btnGetVital = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblAbnormalities = new javax.swing.JTable();
        jLabel23 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtHeight = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtWeight = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtBMI = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtSystolic = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtDiastolic = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtAge = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtTemperature = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        txtPulse = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        txtBloodOxygenLevel = new javax.swing.JTextField();
        btnAddVital = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblEncounterHistory = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        txtCommunityUpdate = new javax.swing.JTextField();
        btnSaveDetailsUpdate = new javax.swing.JButton();
        lblName = new javax.swing.JLabel();
        txtNameUpdate = new javax.swing.JTextField();
        lblAddress = new javax.swing.JLabel();
        txtAddressUpdate = new javax.swing.JTextField();
        lblCity = new javax.swing.JLabel();
        txtCityUpdate = new javax.swing.JTextField();
        lblCommunity = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();

        jLayeredPane2.setLayout(new java.awt.CardLayout());

        tblAllPersonDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Name", "Address", "City", "Community", "Is pateint ?"
            }
        ));
        jScrollPane2.setViewportView(tblAllPersonDetails);

        btnAddVitals.setText("Add vitals");
        btnAddVitals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddVitalsActionPerformed(evt);
            }
        });

        btnUpdateDetails.setText("Update details");
        btnUpdateDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateDetailsActionPerformed(evt);
            }
        });

        btnDeleteDetails.setText("Delete details");
        btnDeleteDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteDetailsActionPerformed(evt);
            }
        });

        btnGetVital.setText("Get vitals");
        btnGetVital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetVitalActionPerformed(evt);
            }
        });

        jLabel22.setText("Abnormal patient list : ");

        tblAbnormalities.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Community", "Abnormal patient name"
            }
        ));
        jScrollPane3.setViewportView(tblAbnormalities);

        jLabel23.setText("People list : ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 891, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnAddVitals)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnGetVital)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnUpdateDetails)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDeleteDetails)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel22)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 885, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel23))
                .addContainerGap(303, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAddVitals, btnDeleteDetails, btnGetVital, btnUpdateDetails});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel23)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddVitals)
                    .addComponent(btnUpdateDetails)
                    .addComponent(btnDeleteDetails)
                    .addComponent(btnGetVital))
                .addGap(52, 52, 52)
                .addComponent(jLabel22)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(129, Short.MAX_VALUE))
        );

        jLayeredPane2.add(jPanel1, "card2");

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Add Vitals");

        jLabel2.setText("Height :");

        txtHeight.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtHeightFocusLost(evt);
            }
        });

        jLabel3.setText("cms");

        jLabel4.setText("Weight :");

        txtWeight.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtWeightFocusLost(evt);
            }
        });

        jLabel5.setText("kg");

        jLabel6.setText("BMI :");

        txtBMI.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBMIFocusLost(evt);
            }
        });

        jLabel7.setText("kg/m2");

        jLabel8.setText("Blood pressure");

        jLabel9.setText("Systolic :");

        txtSystolic.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSystolicFocusLost(evt);
            }
        });

        jLabel10.setText("mmHg");

        jLabel11.setText("Diastolic :");

        txtDiastolic.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDiastolicFocusLost(evt);
            }
        });
        txtDiastolic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDiastolicActionPerformed(evt);
            }
        });

        jLabel12.setText("mmHg");

        jLabel13.setText("Age :");

        txtAge.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAgeFocusLost(evt);
            }
        });

        jLabel14.setText("Temperature: ");

        txtTemperature.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtTemperatureFocusLost(evt);
            }
        });

        jLabel15.setText("F");

        jLabel16.setText("Pulse");

        jLabel17.setText("Rate :");

        txtPulse.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPulseFocusLost(evt);
            }
        });

        jLabel18.setText("/min");

        jLabel20.setText("Blood oxygen level :");

        txtBloodOxygenLevel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBloodOxygenLevelFocusLost(evt);
            }
        });

        btnAddVital.setText("Add vital");
        btnAddVital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddVitalActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel20)
                                .addGap(18, 18, 18)
                                .addComponent(txtBloodOxygenLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addGap(18, 18, 18)
                                .addComponent(txtTemperature, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel15)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(txtHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel13))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(txtWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel5))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(txtBMI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel7))
                                    .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(264, 264, 264)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel16)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtSystolic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel10))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtDiastolic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel12))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel17)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtPulse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel18))
                                    .addComponent(jLabel8))))
                        .addContainerGap(388, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAddVital)
                .addGap(241, 241, 241))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtAge, txtBMI, txtBloodOxygenLevel, txtDiastolic, txtHeight, txtPulse, txtSystolic, txtTemperature, txtWeight});

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel11, jLabel17, jLabel9});

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel13, jLabel14, jLabel2, jLabel20, jLabel4, jLabel6});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(txtWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9)
                        .addComponent(txtSystolic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel10)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtBMI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel11)
                    .addComponent(txtDiastolic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(3, 3, 3))
                    .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(txtTemperature, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel17)
                            .addComponent(txtPulse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18))))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(txtBloodOxygenLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAddVital)
                .addGap(345, 345, 345))
        );

        jLayeredPane2.add(jPanel2, "card3");

        jLabel21.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel21.setText("Encounter history");

        tblEncounterHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Height", "Weight", "Age", "Temperature", "Systolic", "Diastolic", "Pulse", "Blood oxygen level", "BMI"
            }
        ));
        jScrollPane1.setViewportView(tblEncounterHistory);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1188, Short.MAX_VALUE)
                    .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(358, Short.MAX_VALUE))
        );

        jLayeredPane2.add(jPanel3, "card4");

        btnSaveDetailsUpdate.setText("Save details");
        btnSaveDetailsUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveDetailsUpdateActionPerformed(evt);
            }
        });

        lblName.setText("Name :");

        lblAddress.setText("Address :");

        lblCity.setText("City :");

        lblCommunity.setText("Community :");

        jLabel19.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel19.setText("Update details");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, 1188, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(156, 156, 156)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblName)
                                .addComponent(lblAddress)
                                .addComponent(lblCity)
                                .addComponent(lblCommunity))
                            .addGap(40, 40, 40)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtCommunityUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtCityUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtAddressUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtNameUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 437, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSaveDetailsUpdate)))
                    .addContainerGap(539, Short.MAX_VALUE)))
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtAddressUpdate, txtCityUpdate, txtCommunityUpdate, txtNameUpdate});

        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(645, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(113, 113, 113)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblName)
                        .addComponent(txtNameUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(22, 22, 22)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblAddress)
                        .addComponent(txtAddressUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(24, 24, 24)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblCity)
                        .addComponent(txtCityUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(26, 26, 26)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblCommunity)
                        .addComponent(txtCommunityUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 269, Short.MAX_VALUE)
                    .addComponent(btnSaveDetailsUpdate)
                    .addGap(113, 113, 113)))
        );

        jLayeredPane2.add(jPanel4, "card5");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLayeredPane2)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLayeredPane2)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteDetailsActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblAllPersonDetails.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete");
            return;
        }

        DefaultTableModel model = (DefaultTableModel) tblAllPersonDetails.getModel();
        Person selectedPerson = (Person) model.getValueAt(selectedRowIndex, 0);

        personDirec.removePerson(selectedPerson);
        populatePersonTable();
        JOptionPane.showMessageDialog(this, "Record deleted");
    }//GEN-LAST:event_btnDeleteDetailsActionPerformed
    private void panelForDisplay(Component component) {
        jLayeredPane2.removeAll();
        jLayeredPane2.add(component);
        jLayeredPane2.revalidate();
        jLayeredPane2.repaint();
    }
    private void btnAddVitalsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddVitalsActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblAllPersonDetails.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a person details to add vitals");
            return;
        } else {

            DefaultTableModel model = (DefaultTableModel) tblAllPersonDetails.getModel();
            Person selectedPerson = (Person) model.getValueAt(selectedRowIndex, 0);
            if (selectedPerson.isIsPatient() == Boolean.FALSE) {
                selectedPerson.setIsPatient(Boolean.TRUE);
                patient = new Patient();
                patient.setPerson(selectedPerson);
                vitalhist = new EncounterHistory();
                patient.setEncounterHistory(vitalhist);
                patientDir.addPatient(patient);
            } else {
                patient = patientDir.getPatient(selectedPerson.getName());
                vitalhist = patient.getEncounterHistory();
            }
            panelForDisplay(jPanel2);
//            populateEncounterTable(patient);
        }

    }//GEN-LAST:event_btnAddVitalsActionPerformed

    private void txtDiastolicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDiastolicActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDiastolicActionPerformed

    private void btnAddVitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddVitalActionPerformed
        // TODO add your handling code here:
        StringBuilder Error = new StringBuilder();
        VitalSigns vital = new VitalSigns();
        if (!txtHeight.getText().isEmpty()) {
            vital.setHeight(Float.parseFloat(txtHeight.getText()));
        } else {
            Error.append("Enter Height \n");
        }
        if (!txtWeight.getText().isEmpty()) {
            vital.setWeight(Float.parseFloat(txtWeight.getText()));
        } else {
            Error.append("Enter Weight \n");
        }
        if (!txtAge.getText().isEmpty()) {
            vital.setAge(Integer.parseInt(txtAge.getText()));
        } else {
            Error.append("Enter Age \n");
        }
        if (!txtPulse.getText().isEmpty()) {
            vital.setPulse(Integer.parseInt(txtPulse.getText()));
        } else {
            Error.append("Enter pulse \n");
        }
        if (!txtDiastolic.getText().isEmpty()) {
            vital.setBloodPressureDiastolic(Integer.parseInt(txtDiastolic.getText()));
        } else {
            Error.append("Enter diastolic \n");
        }
        if (!txtSystolic.getText().isEmpty()) {
            vital.setBloodPressureSystolic(Integer.parseInt(txtSystolic.getText()));
        } else {
            Error.append("Enter systolic \n");
        }
        if (!txtBMI.getText().isEmpty()) {
            vital.setBmi(Float.parseFloat(txtBMI.getText()));
        } else {
            Error.append("Enter BMI \n");
        }
        if (!txtBloodOxygenLevel.getText().isEmpty()) {
            vital.setBloodOxygenLevel(Integer.parseInt(txtBloodOxygenLevel.getText()));
        } else {
            Error.append("Enter Blood oxygen level \n");
        }
        if (!txtTemperature.getText().isEmpty()) {
            vital.setTemperature(Integer.parseInt(txtTemperature.getText()));
        } else {
            Error.append("Enter temperature \n");
        }
        if (Error.isEmpty()) {
            encounter = new Encounter();
            encounter.setVitalSign(vital);
            vitalhist = patient.getEncounterHistory();
            vitalhist.addEncounter(encounter);
            patient.setEncounterHistory(vitalhist);
            JOptionPane.showMessageDialog(this, "Vital sign information saved");
            txtAge.setText("");
            txtBMI.setText("");
            txtBloodOxygenLevel.setText("");
            txtDiastolic.setText("");
            txtHeight.setText("");
            txtPulse.setText("");
            txtSystolic.setText("");
            txtTemperature.setText("");
            txtWeight.setText("");

        } else {
            JOptionPane.showMessageDialog(this, Error);
        }
    }//GEN-LAST:event_btnAddVitalActionPerformed

    private void btnGetVitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetVitalActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblAllPersonDetails.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a person details to get vitals");
            return;
        } else {

            DefaultTableModel model = (DefaultTableModel) tblAllPersonDetails.getModel();
            Person selectedPerson = (Person) model.getValueAt(selectedRowIndex, 0);
            if (selectedPerson.isIsPatient() != Boolean.FALSE) {
                patient = patientDir.getPatient(selectedPerson.getName());
                vitalhist = patient.getEncounterHistory();
                panelForDisplay(jPanel3);
                populateEncounterTable(patient);
            } else {
                JOptionPane.showMessageDialog(this, "Person is not a patient and hence does not have any vitals in the encounter history");
            }
        }
    }//GEN-LAST:event_btnGetVitalActionPerformed

    private void btnSaveDetailsUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveDetailsUpdateActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblAllPersonDetails.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tblAllPersonDetails.getModel();
        Person selectedPerson = (Person) model.getValueAt(selectedRowIndex, 0);
        StringBuilder Error = new StringBuilder();
        if (!txtNameUpdate.getText().isEmpty()) {
            selectedPerson.setName(txtNameUpdate.getText());
        } else {
            Error.append("Enter Name \n");
        }
        if (!txtAddressUpdate.getText().isEmpty()) {
            selectedPerson.setAddress(txtAddressUpdate.getText());
        } else {
            Error.append("Enter Address \n");
        }
        if (!txtCityUpdate.getText().isEmpty()) {
            selectedPerson.setCommunity(txtCityUpdate.getText());
        } else {
            Error.append("Enter City \n");
        }
        if (!txtCommunityUpdate.getText().isEmpty()) {
            selectedPerson.setCity(txtCommunityUpdate.getText());
        } else {
            Error.append("Enter Community \n");
        }
        if (Error.isEmpty()) {
            JOptionPane.showMessageDialog(this, "User information saved");
            populatePersonTable();
            panelForDisplay(jPanel1);

        } else {
            JOptionPane.showMessageDialog(this, Error);
        }
    }//GEN-LAST:event_btnSaveDetailsUpdateActionPerformed

    private void btnUpdateDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateDetailsActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblAllPersonDetails.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a person details to update");
            return;
        } else {

            DefaultTableModel model = (DefaultTableModel) tblAllPersonDetails.getModel();
            Person selectedPerson = (Person) model.getValueAt(selectedRowIndex, 0);
            panelForDisplay(jPanel4);
            txtNameUpdate.setText(selectedPerson.getName());
            txtAddressUpdate.setText(selectedPerson.getAddress());
            txtCityUpdate.setText(selectedPerson.getCity());
            txtCommunityUpdate.setText(selectedPerson.getCommunity());
        }
    }//GEN-LAST:event_btnUpdateDetailsActionPerformed

    private void txtHeightFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtHeightFocusLost
        // TODO add your handling code here:
        boolean isChar = false;
        if (!evt.isTemporary()) {
            String key = txtHeight.getText();
            for (int i = 0; i < key.length(); i++) {
                if (!(key.charAt(i) >= '0'
                        && key.charAt(i) <= '9')) {
                    isChar = true;
                }
            }
            if (isChar) {
                JOptionPane.showMessageDialog(this, "enter only number");
            }
        }
    }//GEN-LAST:event_txtHeightFocusLost

    private void txtWeightFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtWeightFocusLost
        // TODO add your handling code here:
        boolean isChar = false;
        if (!evt.isTemporary()) {
            String key = txtWeight.getText();
            for (int i = 0; i < key.length(); i++) {
                if (!(key.charAt(i) >= '0'
                        && key.charAt(i) <= '9')) {
                    isChar = true;
                }
            }
            if (isChar) {
                JOptionPane.showMessageDialog(this, "enter only number");
            }
        }
    }//GEN-LAST:event_txtWeightFocusLost

    private void txtBMIFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBMIFocusLost
        // TODO add your handling code here:
        boolean isChar = false;
        if (!evt.isTemporary()) {
            String key = txtBMI.getText();
            for (int i = 0; i < key.length(); i++) {
                if (!(key.charAt(i) >= '0'
                        && key.charAt(i) <= '9')) {
                    isChar = true;
                }
            }
            if (isChar) {
                JOptionPane.showMessageDialog(this, "enter only number");
            }
        }
    }//GEN-LAST:event_txtBMIFocusLost

    private void txtAgeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAgeFocusLost
        // TODO add your handling code here:
        boolean isChar = false;
        if (!evt.isTemporary()) {
            String key = txtAge.getText();
            for (int i = 0; i < key.length(); i++) {
                if (!(key.charAt(i) >= '0'
                        && key.charAt(i) <= '9')) {
                    isChar = true;
                }
            }
            if (isChar) {
                JOptionPane.showMessageDialog(this, "enter only number");
            }
        }
    }//GEN-LAST:event_txtAgeFocusLost

    private void txtTemperatureFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTemperatureFocusLost
        // TODO add your handling code here:
        boolean isChar = false;
        if (!evt.isTemporary()) {
            String key = txtTemperature.getText();
            for (int i = 0; i < key.length(); i++) {
                if (!(key.charAt(i) >= '0'
                        && key.charAt(i) <= '9')) {
                    isChar = true;
                }
            }
            if (isChar) {
                JOptionPane.showMessageDialog(this, "enter only number");
            }
        }
    }//GEN-LAST:event_txtTemperatureFocusLost

    private void txtBloodOxygenLevelFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBloodOxygenLevelFocusLost
        // TODO add your handling code here:
        boolean isChar = false;
        if (!evt.isTemporary()) {
            String key = txtBloodOxygenLevel.getText();
            for (int i = 0; i < key.length(); i++) {
                if (!(key.charAt(i) >= '0'
                        && key.charAt(i) <= '9')) {
                    isChar = true;
                }
            }
            if (isChar) {
                JOptionPane.showMessageDialog(this, "enter only number");
            }
        }
    }//GEN-LAST:event_txtBloodOxygenLevelFocusLost

    private void txtSystolicFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSystolicFocusLost
        // TODO add your handling code here:
        boolean isChar = false;
        if (!evt.isTemporary()) {
            String key = txtSystolic.getText();
            for (int i = 0; i < key.length(); i++) {
                if (!(key.charAt(i) >= '0'
                        && key.charAt(i) <= '9')) {
                    isChar = true;
                }
            }
            if (isChar) {
                JOptionPane.showMessageDialog(this, "enter only number");
            }
        }
    }//GEN-LAST:event_txtSystolicFocusLost

    private void txtDiastolicFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDiastolicFocusLost
        // TODO add your handling code here:
        boolean isChar = false;
        if (!evt.isTemporary()) {
            String key = txtDiastolic.getText();
            for (int i = 0; i < key.length(); i++) {
                if (!(key.charAt(i) >= '0'
                        && key.charAt(i) <= '9')) {
                    isChar = true;
                }
            }
            if (isChar) {
                JOptionPane.showMessageDialog(this, "enter only number");
            }
        }
    }//GEN-LAST:event_txtDiastolicFocusLost

    private void txtPulseFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPulseFocusLost
        // TODO add your handling code here:
        boolean isChar = false;
        if (!evt.isTemporary()) {
            String key = txtPulse.getText();
            for (int i = 0; i < key.length(); i++) {
                if (!(key.charAt(i) >= '0'
                        && key.charAt(i) <= '9')) {
                    isChar = true;
                }
            }
            if (isChar) {
                JOptionPane.showMessageDialog(this, "enter only number");
            }
        }
    }//GEN-LAST:event_txtPulseFocusLost


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddVital;
    private javax.swing.JButton btnAddVitals;
    private javax.swing.JButton btnDeleteDetails;
    private javax.swing.JButton btnGetVital;
    private javax.swing.JButton btnSaveDetailsUpdate;
    private javax.swing.JButton btnUpdateDetails;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblCommunity;
    private javax.swing.JLabel lblName;
    private javax.swing.JTable tblAbnormalities;
    private javax.swing.JTable tblAllPersonDetails;
    private javax.swing.JTable tblEncounterHistory;
    private javax.swing.JTextField txtAddressUpdate;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtBMI;
    private javax.swing.JTextField txtBloodOxygenLevel;
    private javax.swing.JTextField txtCityUpdate;
    private javax.swing.JTextField txtCommunityUpdate;
    private javax.swing.JTextField txtDiastolic;
    private javax.swing.JTextField txtHeight;
    private javax.swing.JTextField txtNameUpdate;
    private javax.swing.JTextField txtPulse;
    private javax.swing.JTextField txtSystolic;
    private javax.swing.JTextField txtTemperature;
    private javax.swing.JTextField txtWeight;
    // End of variables declaration//GEN-END:variables

    private void populatePersonTable() {
        DefaultTableModel model = (DefaultTableModel) tblAllPersonDetails.getModel();
        model.setRowCount(0);

        for (Person p : personDirec.getPersonList()) {

            Object[] row = new Object[5];
            row[0] = p;
            row[1] = p.getAddress();
            row[2] = p.getCity();
            row[3] = p.getCommunity();
            row[4] = p.isIsPatient();
            model.addRow(row);

        }
    }

    private void populateEncounterTable(Patient patient) {
        DefaultTableModel model = (DefaultTableModel) tblEncounterHistory.getModel();
        model.setRowCount(0);
        if (patient.getEncounterHistory() != null) {
            for (Encounter e : patient.getEncounterHistory().getEncounterList()) {
                Object row[] = new Object[9];
                row[0] = e.getVitalSign().getHeight();
                row[1] = e.getVitalSign().getWeight();
                row[2] = e.getVitalSign().getAge();
                row[3] = e.getVitalSign().getTemperature();
                row[4] = e.getVitalSign().getBloodPressureSystolic();
                row[5] = e.getVitalSign().getBloodPressureDiastolic();
                row[6] = e.getVitalSign().getPulse();
                row[7] = e.getVitalSign().getBloodOxygenLevel();
                row[8] = e.getVitalSign().getBmi();
                model.addRow(row);

            }
        } else {
            patientDir.addPatient(patient);
        }
    }

    private void populateAbnormalitiesTable() {
        ArrayList<AbnormalClass> ab = new ArrayList<>();

        for (Patient p : patientDir.getPatientList()) {
            System.out.println(p);
            if (p.getEncounterHistory() != null) {
                System.out.println(p.getEncounterHistory());
                for (Encounter e : p.getEncounterHistory().getEncounterList()) {
                    System.out.println(e.getVitalSign().getBloodOxygenLevel());
                    System.out.println(e.getVitalSign().getTemperature());
                    System.out.println(e.getVitalSign().getBloodPressureDiastolic());
                    System.out.println(e.getVitalSign().getBloodPressureSystolic());
                    
                    
                    if (e.getVitalSign().getBloodOxygenLevel() < 94 | e.getVitalSign().getTemperature() > 98 | e.getVitalSign().getBloodPressureSystolic() > 120 | e.getVitalSign().getBloodPressureDiastolic() < 80) {
                        AbnormalClass abnormal = new AbnormalClass();
                        abnormal.setName(p.getPerson().getName());
                        abnormal.setCommunity(p.getPerson().getCommunity());
                        ab.add(abnormal);
                    }

                }
            }
        }

        DefaultTableModel model = (DefaultTableModel) tblAbnormalities.getModel();
        model.setRowCount(0);
        Set<AbnormalClass> set = new HashSet<>();

        // Iterate through the array
        for (AbnormalClass t : ab) {
            // Add each element into the set
            set.add(t);
        }
        if (set != null) {
            for (AbnormalClass a : set) {
                Object row[] = new Object[2];
                row[0] = a.getCommunity();
                row[1] = a.getName();
//                row[2] = a.getAbnormalities();
                model.addRow(row);
            }
        }
    }
}
